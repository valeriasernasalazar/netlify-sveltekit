import { c as create_ssr_component } from "../../../../chunks/ssr.js";
import "../../../../chunks/store.js";
import "firebase/firestore";
const css = {
  code: ".admin-container.svelte-1tgk9jq{padding:1rem}.error.svelte-1tgk9jq{color:red}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\n    import { db } from '../../../lib/firebase/firebase';\\n    import { collection, getDocs, doc, getDoc, setDoc, updateDoc } from 'firebase/firestore';\\n    import { authStore } from '../../../store/store';\\n    import { onMount } from 'svelte';\\n\\n    let users = [];\\n    let selectedEmail = '';\\n    let selectedUid = '';\\n    let user = null;\\n    let error = '';\\n    let isAdmin = false;\\n    let loading = true;\\n    let usersLoading = true;\\n\\n    onMount(() => {\\n        authStore.subscribe(value => {\\n            user = value.user;\\n            if (user) {\\n                checkAdmin();\\n            } else {\\n                loading = false;\\n            }\\n        });\\n        fetchNonAdminUsers();\\n    });\\n\\n    async function checkAdmin() {\\n        if (user) {\\n            try {\\n                const idTokenResult = await user.getIdTokenResult(true); // true forces token refresh\\n                if (idTokenResult.claims.admin) {\\n                    isAdmin = true;\\n                    console.log('Usuario es administrador');\\n                } else {\\n                    console.log('Usuario no es administrador');\\n                }\\n            } catch (error) {\\n                console.error('Error obteniendo las reclamaciones:', error);\\n            }\\n        } else {\\n            console.log('No hay usuario autenticado');\\n        }\\n        loading = false;\\n    }\\n\\n    async function fetchNonAdminUsers() {\\n        usersLoading = true;\\n        try {\\n            const querySnapshot = await getDocs(collection(db, 'users'));\\n            users = querySnapshot.docs\\n                .map(doc => {\\n                    const data = doc.data();\\n                    if (!data.role) {\\n                        data.role = 'usuario';\\n                        updateDoc(doc.ref, { role: 'usuario' });\\n                    }\\n                    console.log(\`Usuario: \${data.email}, Rol: \${data.role}\`);\\n                    return { id: doc.id, ...data };\\n                })\\n                .filter(user => user.role !== 'administrador')\\n                .map(user => ({ email: user.email, uid: user.id }));\\n            console.log('Usuarios no administradores:', users);\\n        } catch (error) {\\n            console.error('Error obteniendo usuarios no administradores:', error);\\n        }\\n        usersLoading = false;\\n    }\\n\\n    async function makeAdmin() {\\n        error = '';\\n        if (!selectedUid) {\\n            error = 'Por favor, selecciona un correo electrónico válido.';\\n            return;\\n        }\\n\\n        try {\\n            // Verifica si el documento del usuario existe\\n            const userRef = doc(db, 'users', selectedUid);\\n            const docSnap = await getDoc(userRef);\\n\\n            if (docSnap.exists()) {\\n                // Actualiza el rol en Firestore si el documento existe\\n                await updateDoc(userRef, { role: 'administrador' });\\n            } else {\\n                // Si no existe, crea un nuevo documento\\n                await setDoc(userRef, { email: selectedEmail, role: 'administrador' });\\n            }\\n\\n            // Llama al servidor para establecer la reclamación personalizada\\n            const response = await fetch('http://localhost:3001/setAdminRole', {\\n                method: 'POST',\\n                headers: {\\n                    'Content-Type': 'application/json'\\n                },\\n                body: JSON.stringify({ email: selectedEmail })\\n            });\\n\\n            if (response.ok) {\\n                alert('Usuario actualizado a administrador.');\\n                selectedEmail = '';\\n                selectedUid = '';\\n                await fetchNonAdminUsers(); // Actualiza la lista de usuarios no administradores\\n            } else {\\n                error = 'Hubo un error al actualizar el rol del usuario en el servidor.';\\n            }\\n        } catch (err) {\\n            console.error('Error actualizando el rol del usuario:', err);\\n            error = 'Hubo un error al actualizar el rol del usuario.';\\n        }\\n    }\\n<\/script>\\n\\n<div class=\\"admin-container\\">\\n    <h1>Modificar Usuarios</h1>\\n    {#if loading}\\n        <p>Cargando...</p>\\n    {:else}\\n        {#if isAdmin}\\n            <div>\\n                {#if usersLoading}\\n                    <p>Cargando usuarios...</p>\\n                {:else}\\n                    <select bind:value={selectedUid} on:change={e => selectedEmail = users.find(user => user.uid === e.target.value).email}>\\n                        <option value=\\"\\" disabled selected>Selecciona un usuario</option>\\n                        {#each users as user}\\n                            <option value={user.uid}>{user.email}</option>\\n                        {/each}\\n                    </select>\\n                    <button on:click={makeAdmin}>Hacer Administrador</button>\\n                {/if}\\n                {#if error}\\n                    <p class=\\"error\\">{error}</p>\\n                {/if}\\n            </div>\\n        {:else}\\n            <p>No tienes permisos para modificar usuarios.</p>\\n        {/if}\\n    {/if}\\n</div>\\n\\n<style>\\n    .admin-container {\\n        padding: 1rem;\\n    }\\n\\n    .error {\\n        color: red;\\n    }\\n</style>\\n"],"names":[],"mappings":"AA8II,+BAAiB,CACb,OAAO,CAAE,IACb,CAEA,qBAAO,CACH,KAAK,CAAE,GACX"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css);
  return `<div class="admin-container svelte-1tgk9jq"><h1 data-svelte-h="svelte-2opsox">Modificar Usuarios</h1> ${`<p data-svelte-h="svelte-dtqfh9">Cargando...</p>`} </div>`;
});
export {
  Page as default
};
